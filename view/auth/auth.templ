package auth

import "github.com/petrostrak/picwise-ai/view/layout"
import "github.com/nedpals/supabase-go"

templ AccountSetup(){
    @layout.App(true) {
        <div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl">
        <h1 class="text-xl font-black mb8 text-center mb-4">Set up your account</h1>
        @AccountSetupForm(AccountSetupParams{}, AccountSetupErrors{})
        </div>
    }
}

type AccountSetupErrors struct {
    Username string
    Password string
    Email string
}

type AccountSetupParams struct {
    Username string
    Password string
    Email string
}

templ AccountSetupForm(params AccountSetupParams, errors AccountSetupErrors) {
    <form
        hx-post="/account/setup"
        hx-swap="outerHTML">
        <label class="form-control w-full max-w-xs">
            <div class="label">
                <span class="label-text">Username</span>
            </div>
            <input class="input input-bordered" type="text" name="username"/>
            <div class="label">
                if len(errors.Username) > 0 {
                    <span class="label-text text-error">{errors.Username}</span>
                }
            </div>
        </label>
        <button class="btn btn-primary">Set up account <i class="fa-solid fa-arrow-right"></i></button>
    </form>
}

templ Login() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to picwiseai</h1>
                @LoginForm(supabase.UserCredentials{}, LoginErrors{})
			</div>
		</div>
	}
}

templ Signup() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to picwiseai</h1>
				@SignupForm(SignupParams{}, SignupErrors{})
			</div>
		</div>
	}
}

templ SignupSuccess(email string){
    <div>A confirmation email has been sent to <span class="font-semibold text-success"> {email} </span></div>
}

type SignupParams struct {
    Email string
    Password string
    ConfirmPassword string
}

type SignupErrors struct {
    Email string
    Password string
    ConfirmPassword string
}

templ SignupForm(params SignupParams, errors SignupErrors) {
    <form
        hx-post="/signup"
        hx-swap="outerHTML"
        class="space-y-4"
        >
        <div class="w-full">
            <div class="label">
                <span class="label-text">Email</span>
            </div>
            <input type="email" value={params.Email} name="email" required autocomplete="off" placeholder="Type here" class="input input-bordered w-full" />
            if len(errors.Email) > 0 {
                <div class="text-sm text-error">
                {errors.Email}
                </div>
            }
        </div>
        <div class="w-full">
            <div class="label">
                <span class="label-text">Password</span>
            </div>
            <input type="password" name="password" required autocomplete="off" class="input input-bordered w-full" />
            if len(errors.Password) > 0 {
                <div class="label">
                    <span class="label-text-alt text-error">{errors.Password}</span>
                </div>
            }
        </div>
        <div class="w-full">
            <div class="label">
                <span class="label-text">Confirm Password</span>
            </div>
            <input type="password" name="confirmPassword" required autocomplete="off" class="input input-bordered w-full" />
            if len(errors.Password) > 0 {
                <div class="label">
                    <span class="label-text-alt text-error">{errors.ConfirmPassword}</span>
                </div>
            }
        </div>
        <button class="btn btn-primary w-full">Login <i class="fa-solid fa-arrow-right"></i></button>
    </form>
}

type LoginErrors struct {
    Email string
    Password string
    InvalidCredentials string
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors) {
    <form 
        hx-post="/login"
        hx-swap="outerHTML"
        class="space-y-4"
        >
        <div class="w-full">
            <div class="label">
                <span class="label-text">Email</span>
            </div>
            <input type="email" value={creds.Email} name="email" required autocomplete="off" placeholder="Type here" class="input input-bordered w-full" />
            if len(errors.Email) > 0 {
                <div class="text-sm text-error">
                {errors.Email}
                </div> 
            }
        </div>
        <div class="w-full">
            <div class="label">
                <span class="label-text">Password</span>
            </div>
            <input type="password" name="password" required autocomplete="off" placeholder="Type here" class="input input-bordered w-full" />
            if len(errors.Password) > 0 {
                <div class="text-sm text-error">
                {errors.Password}
                </div> 
            }
        </div>
        if len(errors.InvalidCredentials) >0 {
            <div class="text-sm text-error">
                {errors.InvalidCredentials}
            </div>
        }
        <button class="btn btn-primary w-full">Login <i class="fa-solid fa-arrow-right"></i></button>
        <div class="divider">OR</div>
        <a href="/login/provider/google" class="btn btn-outline w-full">Login with Google<i class="fa-brands fa-google"></i></a>
    </form>
}

templ CallbaclScript() {
    <script>
        let url = window.location.href;
        let newURL = url.replace("#", "?");
        window.location = newURL
    </script>
}