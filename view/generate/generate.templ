package generate

import "github.com/petrostrak/picwise-ai/view/layout"
import "github.com/petrostrak/picwise-ai/types"
import "fmt"
import "github.com/petrostrak/picwise-ai/view"
import "github.com/petrostrak/picwise-ai/view/ui"

type ViewData struct {
    Images []types.Image
    FormParams FormParams
    FormErrors FormErrors
}

templ Index(data ViewData) {
    @layout.App(true) {
        <div class="flex w-full h-[calc(100vh-69px)]">
            <div class="w-[400px] border-r border-app p-4">
                @Form(data.FormParams, data.FormErrors)
            </div>
            <div class="flex-1 bg-base-300">
                @Gallery(data.Images)
            </div>
        </div>
    }
}

type FormParams struct {
    Prompt string
    Amount int
}

type FormErrors struct {
    Prompt string
    Amount string
    CreditsNeeded int
    UserCredits int
    Credits bool
}

templ Form(params FormParams, errors FormErrors) {
    <form
        hx-post="/generate"
        hx-swap="outerHTML"
    >
        <div>
            <label class="form-control">
                <div class="label">
                	<span class="label-text">Enter your prompt</span>
                </div>
                <textarea class="textarea textarea-bordered h-24" placeholder="A woman in white dress" name="prompt">{params.Prompt}</textarea>
                if len(errors.Prompt) > 0 {
                    <div class="label">
                        <span class="label-text text-error">{errors.Prompt}</span>
                    </div>
                }
            </label>
            <label class="form-control my-4">
                <div class="label">
                    <span class="label-text">How many images</span>
                </div>
                <div class="join">
                    for _, amount := range amounts {
                        if amount == view.String(params.Amount) {
                            <input checked class="join-item btn" type="radio" name="amount" value={amount} aria-label={amount} />
                        } else {
                            <input class="join-item btn" type="radio" name="amount" value={amount} aria-label={amount} />
                        }
                    }
                </div>
                if len(errors.Prompt) > 0 {
                    <div class="label">
                        <span class="label-text text-error">{errors.Amount}</span>
                    </div>
                }
            </label>
            <button class="btn btn-primary w-full">generate</button>
        </div>
    </form>
    if errors.Credits {
        @ui.CreditsModal(errors.CreditsNeeded, errors.UserCredits)
    }
}

templ Gallery(images []types.Image) {
	<div class="grid grid-cols-4 p-4 gap-4 w-full" id="gallery">
		for _, image := range images {
			@GalleryImage(image)
		}
	</div>
}

templ GalleryImage(image types.Image) {
	if image.Status == types.ImageStatusCompleted {
		<div class="aspect-square rounded-xl cursor-pointer">
			<img class="object-cover rounded-xl" src={ image.ImageLocation }/>
		</div>
	} else if image.Status == types.ImageStatusFailed {
		<div class="aspect-square rounded-xl flex justify-center items-center">
			<div>
				<i class="fa-solid fa-bug text-5xl font-black text-slate-600"></i>
			</div>
		</div>
	} else if image.Status == types.ImageStatusPending {
		<div
		    hx-get={fmt.Sprintf("/generate/image/status/%d", image.ID)}
		    hx-trigger="load delay:3s"
			class="aspect-square rounded-xl flex justify-center items-center"
		>
			<div>
				<span class="loading loading-spinner loading-lg text-gray-600"></span>
			</div>
		</div>
	}
}

var amounts =  []string{ "1", "2", "3", "4" }